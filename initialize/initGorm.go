package initialize

import (
	"go-admin/global"

	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// Gorm 初始化数据库并产生数据库全局变量
// Author SliverHorn
func Gorm() *gorm.DB {

	// switch global.GVA_CONFIG.System.DbType {
	// case "mysql":
	// 	return GormMysql()
	// case "pgsql":
	// 	return GormPgSql()
	// case "oracle":
	// 	return GormOracle()
	// case "mssql":
	// 	return GormMssql()
	// default:
	return GormMysql()
	// }
}

// GormMysql 初始化Mysql数据库
// Author [piexlmax](https://github.com/piexlmax)
// Author [SliverHorn](https://github.com/SliverHorn)
func GormMysql() *gorm.DB {

	mysqlConfig := mysql.Config{
		DSN:                       global.GVA_CONFIG.Mysql.Username + ":" + global.GVA_CONFIG.Mysql.Password + "@tcp(" + global.GVA_CONFIG.Mysql.Path + ":" + global.GVA_CONFIG.Mysql.Port + ")/" + global.GVA_CONFIG.Mysql.Dbname + "?" + global.GVA_CONFIG.Mysql.Config, // DSN data source name
		DefaultStringSize:         191,                                                                                                                                                                                                                                    // string 类型字段的默认长度
		SkipInitializeWithVersion: false,                                                                                                                                                                                                                                  // 根据版本自动配置

	}
	if db, err := gorm.Open(mysql.New(mysqlConfig), &gorm.Config{}); err != nil {
		return nil
	} else {
		db.InstanceSet("gorm:table_options", "ENGINE="+global.GVA_CONFIG.Mysql.Engine)
		sqlDB, _ := db.DB()
		sqlDB.SetMaxIdleConns(global.GVA_CONFIG.Mysql.MaxIdleConns)
		sqlDB.SetMaxOpenConns(global.GVA_CONFIG.Mysql.MaxOpenConns)
		return db
	}
}

// RegisterTables 注册数据库表专用
// // Author SliverHorn
// func RegisterTables(db *gorm.DB) {
// 	err := db.AutoMigrate(
// 		// 系统模块表
// 		system.SysApi{},
// 		system.SysUser{},
// 		system.SysBaseMenu{},
// 		system.JwtBlacklist{},
// 		system.SysAuthority{},
// 		system.SysDictionary{},
// 		system.SysOperationRecord{},
// 		system.SysAutoCodeHistory{},
// 		system.SysDictionaryDetail{},
// 		system.SysBaseMenuParameter{},
// 		system.SysBaseMenuBtn{},
// 		system.SysAuthorityBtn{},
// 		system.SysAutoCode{},

// 		// 示例模块表
// 		example.ExaFile{},
// 		example.ExaCustomer{},
// 		example.ExaFileChunk{},
// 		example.ExaFileUploadAndDownload{},

// 		// 自动化模块表
// 		// Code generated by github.com/flipped-aurora/gin-vue-admin/server Begin; DO NOT EDIT.

// 		// Code generated by github.com/flipped-aurora/gin-vue-admin/server End; DO NOT EDIT.
// 	)
// 	if err != nil {
// 		global.GVA_LOG.Error("register table failed", zap.Error(err))
// 		os.Exit(0)
// 	}
// 	global.GVA_LOG.Info("register table success")
// }
